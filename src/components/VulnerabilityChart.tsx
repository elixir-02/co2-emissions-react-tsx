import React, { useEffect, useState } from 'react';
import { Line, Bar } from 'react-chartjs-2';
import { Chart, registerables } from 'chart.js';
import { FormControl, InputLabel, MenuItem, Select, Checkbox, FormControlLabel, FormGroup, Button } from '@mui/material';
import Footer from './Footer';

Chart.register(...registerables);

interface Data {
  ISO3: string;
  Name: string;
  Date: string; 
  [key: string]: string | number;
}

const ChartComponent: React.FC = () => {
  const [data, setData] = useState<Data[]>([]);
  const [chartType, setChartType] = useState<'line' | 'bar'>('line');
  const [selectedYear, setSelectedYear] = useState<string>('');
  const [selectedCountries, setSelectedCountries] = useState<string[]>([]); 
  const [showAllYears, setShowAllYears] = useState<boolean>(true);
  const [selectedMetrics, setSelectedMetrics] = useState<string[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('/data/vulnerability.csv');
        const csvData = await response.text();
        const parsedData = parseCSV(csvData);
        setData(parsedData);
        const savedChartType = localStorage.getItem('chartType');
        const savedSelectedYear = localStorage.getItem('selectedYear');
        const savedSelectedCountries = localStorage.getItem('selectedCountries');
        const savedShowAllYears = localStorage.getItem('showAllYears');
        const savedSelectedMetrics = localStorage.getItem('selectedMetrics');
  
        setChartType(savedChartType ? (savedChartType as 'line' | 'bar') : 'line');
  
        setSelectedYear(savedSelectedYear || (parsedData.length > 0 ? Object.keys(parsedData[0])[2] : ''));
  
        const defaultMetricForFirstYear = Object.keys(parsedData[0] || {}).slice(3)[0];
        const defaultMetrics = savedSelectedMetrics ? JSON.parse(savedSelectedMetrics) : [];
        const updatedMetrics = defaultMetrics.length > 0 ? defaultMetrics : [defaultMetricForFirstYear];
        setSelectedMetrics(updatedMetrics);
  
        setSelectedCountries(savedSelectedCountries ? JSON.parse(savedSelectedCountries) : []);
        setShowAllYears(savedShowAllYears ? JSON.parse(savedShowAllYears) : true);
      } catch (error) {
        console.error('Error fetching data:', error);
        alert('Error fetching data. Please try again.');
      }
    };
  
    fetchData();
  }, []);
  

  useEffect(() => {
    localStorage.setItem('chartType', chartType);
    localStorage.setItem('selectedYear', selectedYear);
    localStorage.setItem('selectedCountries', JSON.stringify(selectedCountries));
    localStorage.setItem('showAllYears', JSON.stringify(showAllYears));
    localStorage.setItem('selectedMetrics', JSON.stringify(selectedMetrics));
  }, [chartType, selectedYear, selectedCountries, showAllYears, selectedMetrics]);

  const parseCSV = (csv: string): Data[] => {
    const lines = csv.split('\n');
    const headers = lines[0].split(',');

    return lines.slice(1).map((line) => {
      const values = line.split(',');
      const entry: Data = { ISO3: values[0], Name: values[1], Date: values[2] };

      headers.slice(3).forEach((year, index) => {
        entry[year] = parseFloat(values[index + 3]);
      });

      return entry;
    });
  };

  const filteredData = data.filter(
    (entry) =>
      entry[selectedYear] !== undefined &&
      (showAllYears || selectedCountries.length === 0 || selectedCountries.includes(entry.ISO3))
  );

  
const getRandomColor = () => Math.floor(Math.random() * 256);

const getDarkPastelColor = () => {
  const baseColor = getRandomColor();
  const darkPastelSaturation = Math.floor(Math.random() * 41) + 60; 
  const darkPastelLightness = Math.floor(Math.random() * 21) + 40; 

  return `hsl(${baseColor}, ${darkPastelSaturation}%, ${darkPastelLightness}%)`;
};

const getBackgroundColor = getDarkPastelColor;

  const getBorderColor = (index: number) => {
    return getBackgroundColor();
  };


  const chartData = {
    labels: filteredData.map((entry) => entry.Name),
    datasets: selectedMetrics.map((metric, index) => ({
      label: metric,
      data: filteredData.map((entry) => entry[metric]),
      backgroundColor: getBackgroundColor(),
      borderColor: getBorderColor(index),
      borderWidth: 1,
    })),
  };

  
  const getChart = () => {
    if (chartType === 'line') {
      return <Line data={chartData} />;
    } else {
      return (
        <Bar
          data={chartData}
          options={{
            indexAxis: 'y',
            scales: {
              x: { type: 'linear', position: 'bottom' },
              y: { stacked: true },
            },
          }}
          key={`chart-key-${Math.random()}`}
        />
      );
    }
  };

  const handleDownloadData = () => {
    const csvContent = [
      selectedMetrics.length > 0 ? ['Name', ...selectedMetrics] : Object.keys(data[0]).slice(1),
      ...filteredData.map(entry => selectedMetrics.length > 0 ? [entry.Name, ...selectedMetrics.map(metric => entry[metric])] : Object.values(entry).slice(1)),
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'chart_data.csv';
    link.click();
  };

  const handleGenerateShareableURL = () => {
    const url = new URL(window.location.href);
    url.searchParams.set('chartType', chartType);
    url.searchParams.set('selectedYear', selectedYear);
    url.searchParams.set('selectedCountries', selectedCountries.join(','));
    url.searchParams.set('showAllYears', String(showAllYears));
    url.searchParams.set('selectedMetrics', selectedMetrics.join(','));
    alert('Shareable URL: ' + url.href);
  };

  return (
    <>
    
    
    <div style={{marginTop:'25px'}}>
      {data.length > 0 && (
        <div>
          <FormControl size='small' variant='outlined' style={{  width: '180px',marginLeft:'-4rem' }}>
            <InputLabel id="select-small-label-chart">Chart Type</InputLabel>
            <Select
              labelId="chart-type-label"
              id="chart-type"
              label='Chart Type'
              value={chartType}
              onChange={(e) => setChartType(e.target.value as 'line' | 'bar')}
            >
              <MenuItem value="line">Line Chart</MenuItem>
              <MenuItem value="bar">Stacked Bar Chart</MenuItem>
            </Select>
          </FormControl>

          <FormControl size='small' variant='outlined' style={{ marginLeft: '2rem', width: '180px' }}>
            <InputLabel id="select-small-label-year">Select Year</InputLabel>
            <Select
              labelId="year-label"
              id="year"
              label='Select Year'
              value={selectedYear}
              
              onChange={(e) => setSelectedYear(e.target.value as string)}
            >
               <MenuItem value="">
          <em>Select Year</em>
        </MenuItem>
              {data.length > 0 &&
                Object.keys(data[0] || {})
                  .slice(3)
                  .map((year) => (
                    <MenuItem key={year} value={year}>
                      {year}
                    </MenuItem>
                  ))}
            </Select>
          </FormControl>

          <FormControl size='small' variant='outlined' style={{ marginLeft: '2rem', width: '180px' }}>
            <InputLabel id="select-small-label-country">Countries</InputLabel>
            <Select
              labelId="countries-label"
              id="countries"
              label='Countries'
              value={selectedCountries}
              onChange={(e) => setSelectedCountries(e.target.value as string[])}
              multiple
              renderValue={(selected) => (selected as string[]).join(', ')}
            >
              {data.length > 0 &&
                data.map((entry) => (
                  <MenuItem key={entry.ISO3} value={entry.ISO3}>
                    {entry.Name}
                  </MenuItem>
                ))}
            </Select>
          </FormControl>

          <FormControl size='small' variant='outlined' style={{ marginLeft: '2rem', width: '180px' }}>
            <InputLabel id="select-small-label-metrics">Metrics</InputLabel>
            <Select
              labelId="metrics-label"
              label='Metrics'
              id="metrics"
              multiple
              value={selectedMetrics}
              onChange={(e) => setSelectedMetrics(e.target.value as string[])}
              renderValue={(selected) => (selected as string[]).join(', ')}
            >
              {data.length > 0 &&
                Object.keys(data[0] || {})
                  .slice(3)
                  .map((metric) => (
                    <MenuItem key={metric} value={metric}>
                      {metric}
                    </MenuItem>
                  ))}
            </Select>    
          </FormControl>

          <Button variant="contained" onClick={handleDownloadData} style={{ marginLeft: '2rem' }}>
            Download Data
          </Button>

          <Button variant="contained" onClick={handleGenerateShareableURL} style={{ marginLeft: '2rem',width:'165px' }}>
             Share URL
          </Button>

          <FormGroup style={{marginTop:'20px', width: '200px'}}>
            <FormControlLabel
              control={<Checkbox checked={showAllYears} onChange={() => setShowAllYears(!showAllYears)} />}
              label="Show All Years Data"
            />
          </FormGroup>
        </div>
      )}
      {getChart()}
    </div>
    <Footer/>
    </>
  );
};

export default ChartComponent;
